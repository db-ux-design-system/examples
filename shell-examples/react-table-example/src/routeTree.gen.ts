/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const IndexLazyRouteImport = createFileRoute('/')()
const HelpIndexLazyRouteImport = createFileRoute('/help/')()
const UsersViewerLazyRouteImport = createFileRoute('/users/viewer')()
const UsersEditorLazyRouteImport = createFileRoute('/users/editor')()
const UsersAdminLazyRouteImport = createFileRoute('/users/admin')()
const DataIncomeLazyRouteImport = createFileRoute('/data/income')()
const DataBudgetLazyRouteImport = createFileRoute('/data/budget')()

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const HelpIndexLazyRoute = HelpIndexLazyRouteImport.update({
  id: '/help/',
  path: '/help/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/help/index.lazy').then((d) => d.Route))
const UsersViewerLazyRoute = UsersViewerLazyRouteImport.update({
  id: '/users/viewer',
  path: '/users/viewer',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/users/viewer.lazy').then((d) => d.Route))
const UsersEditorLazyRoute = UsersEditorLazyRouteImport.update({
  id: '/users/editor',
  path: '/users/editor',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/users/editor.lazy').then((d) => d.Route))
const UsersAdminLazyRoute = UsersAdminLazyRouteImport.update({
  id: '/users/admin',
  path: '/users/admin',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/users/admin.lazy').then((d) => d.Route))
const DataIncomeLazyRoute = DataIncomeLazyRouteImport.update({
  id: '/data/income',
  path: '/data/income',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/data/income.lazy').then((d) => d.Route))
const DataBudgetLazyRoute = DataBudgetLazyRouteImport.update({
  id: '/data/budget',
  path: '/data/budget',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/data/budget.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/data/budget': typeof DataBudgetLazyRoute
  '/data/income': typeof DataIncomeLazyRoute
  '/users/admin': typeof UsersAdminLazyRoute
  '/users/editor': typeof UsersEditorLazyRoute
  '/users/viewer': typeof UsersViewerLazyRoute
  '/help': typeof HelpIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/data/budget': typeof DataBudgetLazyRoute
  '/data/income': typeof DataIncomeLazyRoute
  '/users/admin': typeof UsersAdminLazyRoute
  '/users/editor': typeof UsersEditorLazyRoute
  '/users/viewer': typeof UsersViewerLazyRoute
  '/help': typeof HelpIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/data/budget': typeof DataBudgetLazyRoute
  '/data/income': typeof DataIncomeLazyRoute
  '/users/admin': typeof UsersAdminLazyRoute
  '/users/editor': typeof UsersEditorLazyRoute
  '/users/viewer': typeof UsersViewerLazyRoute
  '/help/': typeof HelpIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/data/budget'
    | '/data/income'
    | '/users/admin'
    | '/users/editor'
    | '/users/viewer'
    | '/help'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/data/budget'
    | '/data/income'
    | '/users/admin'
    | '/users/editor'
    | '/users/viewer'
    | '/help'
  id:
    | '__root__'
    | '/'
    | '/data/budget'
    | '/data/income'
    | '/users/admin'
    | '/users/editor'
    | '/users/viewer'
    | '/help/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DataBudgetLazyRoute: typeof DataBudgetLazyRoute
  DataIncomeLazyRoute: typeof DataIncomeLazyRoute
  UsersAdminLazyRoute: typeof UsersAdminLazyRoute
  UsersEditorLazyRoute: typeof UsersEditorLazyRoute
  UsersViewerLazyRoute: typeof UsersViewerLazyRoute
  HelpIndexLazyRoute: typeof HelpIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help/': {
      id: '/help/'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/viewer': {
      id: '/users/viewer'
      path: '/users/viewer'
      fullPath: '/users/viewer'
      preLoaderRoute: typeof UsersViewerLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/editor': {
      id: '/users/editor'
      path: '/users/editor'
      fullPath: '/users/editor'
      preLoaderRoute: typeof UsersEditorLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/admin': {
      id: '/users/admin'
      path: '/users/admin'
      fullPath: '/users/admin'
      preLoaderRoute: typeof UsersAdminLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/income': {
      id: '/data/income'
      path: '/data/income'
      fullPath: '/data/income'
      preLoaderRoute: typeof DataIncomeLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data/budget': {
      id: '/data/budget'
      path: '/data/budget'
      fullPath: '/data/budget'
      preLoaderRoute: typeof DataBudgetLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DataBudgetLazyRoute: DataBudgetLazyRoute,
  DataIncomeLazyRoute: DataIncomeLazyRoute,
  UsersAdminLazyRoute: UsersAdminLazyRoute,
  UsersEditorLazyRoute: UsersEditorLazyRoute,
  UsersViewerLazyRoute: UsersViewerLazyRoute,
  HelpIndexLazyRoute: HelpIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
