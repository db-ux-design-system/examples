/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const IndexLazyRouteImport = createFileRoute('/')()
const DocsIndexLazyRouteImport = createFileRoute('/docs/')()
const BlogIndexLazyRouteImport = createFileRoute('/blog/')()
const ApiIndexLazyRouteImport = createFileRoute('/api/')()
const ApiClientApiLazyRouteImport = createFileRoute('/api/client-api')()
const DocsGettingStartedVueLazyRouteImport = createFileRoute(
  '/docs/getting-started/vue',
)()
const DocsGettingStartedReactLazyRouteImport = createFileRoute(
  '/docs/getting-started/react',
)()
const DocsGettingStartedAngularLazyRouteImport = createFileRoute(
  '/docs/getting-started/angular',
)()
const ApiPluginsLinksLazyRouteImport = createFileRoute('/api/plugins/links')()
const ApiPluginsContentLazyRouteImport = createFileRoute(
  '/api/plugins/content',
)()

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const DocsIndexLazyRoute = DocsIndexLazyRouteImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/docs/index.lazy').then((d) => d.Route))
const BlogIndexLazyRoute = BlogIndexLazyRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/blog/index.lazy').then((d) => d.Route))
const ApiIndexLazyRoute = ApiIndexLazyRouteImport.update({
  id: '/api/',
  path: '/api/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/api/index.lazy').then((d) => d.Route))
const ApiClientApiLazyRoute = ApiClientApiLazyRouteImport.update({
  id: '/api/client-api',
  path: '/api/client-api',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/api/client-api.lazy').then((d) => d.Route),
)
const DocsGettingStartedVueLazyRoute =
  DocsGettingStartedVueLazyRouteImport.update({
    id: '/docs/getting-started/vue',
    path: '/docs/getting-started/vue',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/docs/getting-started/vue.lazy').then((d) => d.Route),
  )
const DocsGettingStartedReactLazyRoute =
  DocsGettingStartedReactLazyRouteImport.update({
    id: '/docs/getting-started/react',
    path: '/docs/getting-started/react',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/docs/getting-started/react.lazy').then((d) => d.Route),
  )
const DocsGettingStartedAngularLazyRoute =
  DocsGettingStartedAngularLazyRouteImport.update({
    id: '/docs/getting-started/angular',
    path: '/docs/getting-started/angular',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/docs/getting-started/angular.lazy').then((d) => d.Route),
  )
const ApiPluginsLinksLazyRoute = ApiPluginsLinksLazyRouteImport.update({
  id: '/api/plugins/links',
  path: '/api/plugins/links',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/api/plugins/links.lazy').then((d) => d.Route),
)
const ApiPluginsContentLazyRoute = ApiPluginsContentLazyRouteImport.update({
  id: '/api/plugins/content',
  path: '/api/plugins/content',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/api/plugins/content.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/api/client-api': typeof ApiClientApiLazyRoute
  '/api': typeof ApiIndexLazyRoute
  '/blog': typeof BlogIndexLazyRoute
  '/docs': typeof DocsIndexLazyRoute
  '/api/plugins/content': typeof ApiPluginsContentLazyRoute
  '/api/plugins/links': typeof ApiPluginsLinksLazyRoute
  '/docs/getting-started/angular': typeof DocsGettingStartedAngularLazyRoute
  '/docs/getting-started/react': typeof DocsGettingStartedReactLazyRoute
  '/docs/getting-started/vue': typeof DocsGettingStartedVueLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/api/client-api': typeof ApiClientApiLazyRoute
  '/api': typeof ApiIndexLazyRoute
  '/blog': typeof BlogIndexLazyRoute
  '/docs': typeof DocsIndexLazyRoute
  '/api/plugins/content': typeof ApiPluginsContentLazyRoute
  '/api/plugins/links': typeof ApiPluginsLinksLazyRoute
  '/docs/getting-started/angular': typeof DocsGettingStartedAngularLazyRoute
  '/docs/getting-started/react': typeof DocsGettingStartedReactLazyRoute
  '/docs/getting-started/vue': typeof DocsGettingStartedVueLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/api/client-api': typeof ApiClientApiLazyRoute
  '/api/': typeof ApiIndexLazyRoute
  '/blog/': typeof BlogIndexLazyRoute
  '/docs/': typeof DocsIndexLazyRoute
  '/api/plugins/content': typeof ApiPluginsContentLazyRoute
  '/api/plugins/links': typeof ApiPluginsLinksLazyRoute
  '/docs/getting-started/angular': typeof DocsGettingStartedAngularLazyRoute
  '/docs/getting-started/react': typeof DocsGettingStartedReactLazyRoute
  '/docs/getting-started/vue': typeof DocsGettingStartedVueLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/client-api'
    | '/api'
    | '/blog'
    | '/docs'
    | '/api/plugins/content'
    | '/api/plugins/links'
    | '/docs/getting-started/angular'
    | '/docs/getting-started/react'
    | '/docs/getting-started/vue'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/client-api'
    | '/api'
    | '/blog'
    | '/docs'
    | '/api/plugins/content'
    | '/api/plugins/links'
    | '/docs/getting-started/angular'
    | '/docs/getting-started/react'
    | '/docs/getting-started/vue'
  id:
    | '__root__'
    | '/'
    | '/api/client-api'
    | '/api/'
    | '/blog/'
    | '/docs/'
    | '/api/plugins/content'
    | '/api/plugins/links'
    | '/docs/getting-started/angular'
    | '/docs/getting-started/react'
    | '/docs/getting-started/vue'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ApiClientApiLazyRoute: typeof ApiClientApiLazyRoute
  ApiIndexLazyRoute: typeof ApiIndexLazyRoute
  BlogIndexLazyRoute: typeof BlogIndexLazyRoute
  DocsIndexLazyRoute: typeof DocsIndexLazyRoute
  ApiPluginsContentLazyRoute: typeof ApiPluginsContentLazyRoute
  ApiPluginsLinksLazyRoute: typeof ApiPluginsLinksLazyRoute
  DocsGettingStartedAngularLazyRoute: typeof DocsGettingStartedAngularLazyRoute
  DocsGettingStartedReactLazyRoute: typeof DocsGettingStartedReactLazyRoute
  DocsGettingStartedVueLazyRoute: typeof DocsGettingStartedVueLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/': {
      id: '/api/'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/client-api': {
      id: '/api/client-api'
      path: '/api/client-api'
      fullPath: '/api/client-api'
      preLoaderRoute: typeof ApiClientApiLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/getting-started/vue': {
      id: '/docs/getting-started/vue'
      path: '/docs/getting-started/vue'
      fullPath: '/docs/getting-started/vue'
      preLoaderRoute: typeof DocsGettingStartedVueLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/getting-started/react': {
      id: '/docs/getting-started/react'
      path: '/docs/getting-started/react'
      fullPath: '/docs/getting-started/react'
      preLoaderRoute: typeof DocsGettingStartedReactLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/getting-started/angular': {
      id: '/docs/getting-started/angular'
      path: '/docs/getting-started/angular'
      fullPath: '/docs/getting-started/angular'
      preLoaderRoute: typeof DocsGettingStartedAngularLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/plugins/links': {
      id: '/api/plugins/links'
      path: '/api/plugins/links'
      fullPath: '/api/plugins/links'
      preLoaderRoute: typeof ApiPluginsLinksLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/plugins/content': {
      id: '/api/plugins/content'
      path: '/api/plugins/content'
      fullPath: '/api/plugins/content'
      preLoaderRoute: typeof ApiPluginsContentLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ApiClientApiLazyRoute: ApiClientApiLazyRoute,
  ApiIndexLazyRoute: ApiIndexLazyRoute,
  BlogIndexLazyRoute: BlogIndexLazyRoute,
  DocsIndexLazyRoute: DocsIndexLazyRoute,
  ApiPluginsContentLazyRoute: ApiPluginsContentLazyRoute,
  ApiPluginsLinksLazyRoute: ApiPluginsLinksLazyRoute,
  DocsGettingStartedAngularLazyRoute: DocsGettingStartedAngularLazyRoute,
  DocsGettingStartedReactLazyRoute: DocsGettingStartedReactLazyRoute,
  DocsGettingStartedVueLazyRoute: DocsGettingStartedVueLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
